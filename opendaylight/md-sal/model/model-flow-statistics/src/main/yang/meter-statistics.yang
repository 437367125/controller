module opendaylight-meter-statistics {
    namespace "urn:opendaylight:meter:statistics";
    prefix meterstat;

    import yang-ext {prefix ext; revision-date "2013-07-09";}
    import opendaylight-inventory {prefix inv;revision-date "2013-08-19";}
    import opendaylight-meter-types {prefix meter-types;revision-date "2013-09-18";}
    import flow-capable-transaction {prefix tr;}
    

    revision "2013-11-11" {
        description "Initial revision of meter statistics service";
    }

    typedef meter-stats-ref {
        type instance-identifier;
    }
    
    grouping meter-stats-response {
        uses "inv:node-context-ref";

        list meter-statistics {
	        uses meter-types:meter-statistics;
        }
    }

    typedef meter-config-ref {
        type instance-identifier;
    }
    
    grouping meter-config-response {
        uses "inv:node-context-ref";

        list meter-config-stats {
        	uses meter-types:meter-config-stats;
        }
    }

    typedef meter-features-ref {
        type instance-identifier;
    }
    
    grouping meter-features-response {
        uses "inv:node-context-ref";

        uses meter-types:meter-features;
    }

	container meter-all-stats {
		container meter-stats {
			uses meter-stats-response;
		}
		
		container meter-config {
			uses meter-config-response;
		}
		
		container meter-features {
			uses meter-features-response;
		}
	}
	// RPC calls
	rpc get-all-meter-statistics {
		input {
            uses inv:node-context-ref;
        }
        output {
			uses meter-stats-response;
			uses tr:transaction-aware;
        }
	
	}
	
	rpc get-meter-statistics {
		input {
            uses inv:node-context-ref;
            leaf meter-id{
            	type meter-types:meter-id;
            }
        }
        output {
            uses meter-stats-response;
            uses tr:transaction-aware;
        }
	
	}
	
	rpc get-all-meter-config-statistics {
		input {
            uses inv:node-context-ref;
        }
        output {
        	uses meter-config-response;
            uses tr:transaction-aware;
        }
	}
	
	rpc get-meter-features {
		input {
            uses inv:node-context-ref;
        }
        output {
        	uses meter-features-response;
            uses tr:transaction-aware;
        }
	}
	

	//Notification calls
	
	notification meter-statistics-updated {
	    leaf meter-stats-id {
            type meter-stats-ref;
        }
    	uses meter-stats-response;
        uses tr:transaction-aware;
	}
	
	notification meter-config-stats-updated {
		leaf meter-config-id {
            type meter-config-ref;
        }
	
		uses meter-config-response;
        uses tr:transaction-aware;
	}

	notification meter-features-updated {
	    leaf meter-features-id {
            type meter-features-ref;
        }
	
		uses meter-features-response;
        uses tr:transaction-aware;
	}
}
